
package eu.csaware.stix2.sdos;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import eu.csaware.stix2.common.*;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * vulnerability
 * <p>
 * A Vulnerability is a mistake in software that can be directly used by a hacker to gain access to a system or network.
 */
public class Vulnerability
		  extends Core {

	/**
	 * The type of this object, which MUST be the literal `vulnerability`.
	 */
	@SerializedName("type")
	@Expose
	@Pattern(regexp = Types.VULNERABILITY_TYPE)
	private String type = Types.VULNERABILITY_TYPE;
	/**
	 * id
	 * <p>
	 */
	@SerializedName("id")
	@Expose
	@Pattern(regexp = "^vulnerability--")
	private String id;
	/**
	 * The name used to identify the Vulnerability.
	 * (Required)
	 */
	@SerializedName("name")
	@Expose
	@NotNull
	private String name;
	/**
	 * A description that provides more details and context about the Vulnerability.
	 */
	@SerializedName("description")
	@Expose
	private String description;


	@SerializedName("x_da_threat_severity")
	@Expose
	private Integer xDaThreatSeverity;

	@SerializedName("x_da_threat_group")
	@Expose
	private String xDaThreatGroup;

	@SerializedName("x_da_risk_level")
	@Expose
	private Integer xDaRiskLevel;

	@SerializedName("x_da_exploitability_level")
	@Expose
	private Integer xDaExploitabilityLevel;

	/**
	 * No args constructor for use in serialization
	 */
	public Vulnerability() {
	}

	/**
	 * @param externalReferences
	 * @param created
	 * @param granularMarkings
	 * @param name
	 * @param description
	 * @param modified
	 * @param createdByRef
	 * @param id
	 * @param objectMarkingRefs
	 * @param type
	 * @param revoked
	 * @param labels
	 */
	public Vulnerability(String type, String id, String name, String description, String createdByRef,
								List<String> labels, LocalDateTime created, LocalDateTime modified, Boolean revoked,
								List<ExternalReference> externalReferences, List<String> objectMarkingRefs, List<GranularMarking> granularMarkings) {

		super(createdByRef, labels, created, modified, revoked, externalReferences, objectMarkingRefs, granularMarkings);
		if (!type.equals(Types.VULNERABILITY_TYPE)) {
			type = Types.VULNERABILITY_TYPE;
		}
		this.type = type;
		this.id = id;
		this.name = name;
		this.description = description;
	}

	/**
	 * The type of this object, which MUST be the literal `vulnerability`.
	 */
	public String getType() {
		return type;
	}

	/**
	 * The type of this object, which MUST be the literal `vulnerability`.
	 */
	public void setType(String type) {
		if (!type.equals(Types.VULNERABILITY_TYPE)) {
			type = Types.VULNERABILITY_TYPE;
		}
		this.type = type;
	}

	/**
	 * id
	 * <p>
	 */
	public String getId() {
		return id;
	}

	/**
	 * id
	 * <p>
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * The name used to identify the Vulnerability.
	 * (Required)
	 */
	public String getName() {
		return name;
	}

	/**
	 * The name used to identify the Vulnerability.
	 * (Required)
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * A description that provides more details and context about the Vulnerability.
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * A description that provides more details and context about the Vulnerability.
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	public Integer getxDaThreatSeverity() {
		return xDaThreatSeverity;
	}

	public void setxDaThreatSeverity(Integer xDaThreatSeverity) {
		this.xDaThreatSeverity = xDaThreatSeverity;
	}


	public String getxDaThreatGroup() {
		return xDaThreatGroup;
	}

	public void setxDaThreatGroup(String xDaThreatGroup) {
		this.xDaThreatGroup = xDaThreatGroup;
	}

	public Integer getxDaRiskLevel() {
		return xDaRiskLevel;
	}

	public void setxDaRiskLevel(Integer xDaRiskLevel) {
		this.xDaRiskLevel = xDaRiskLevel;
	}

	public Integer getxDaExploitabilityLevel() {
		return xDaExploitabilityLevel;
	}

	public void setxDaExploitabilityLevel(Integer xDaExploitabilityLevel) {
		this.xDaExploitabilityLevel = xDaExploitabilityLevel;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(Vulnerability.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
		int baseLength = sb.length();
		String superString = super.toString();
		if (superString != null) {
			int contentStart = superString.indexOf('[');
			int contentEnd = superString.lastIndexOf(']');
			if ((contentStart >= 0) && (contentEnd > contentStart)) {
				sb.append(superString, (contentStart + 1), contentEnd);
			} else {
				sb.append(superString);
			}
		}
		if (sb.length() > baseLength) {
			sb.append(',');
		}
		sb.append("type");
		sb.append('=');
		sb.append(((this.type == null) ? "<null>" : this.type));
		sb.append(',');
		sb.append("id");
		sb.append('=');
		sb.append(((this.id == null) ? "<null>" : this.id));
		sb.append(',');
		sb.append("name");
		sb.append('=');
		sb.append(((this.name == null) ? "<null>" : this.name));
		sb.append(',');
		sb.append("description");
		sb.append('=');
		sb.append(((this.description == null) ? "<null>" : this.description));
		sb.append(',');
		if (sb.charAt((sb.length() - 1)) == ',') {
			sb.setCharAt((sb.length() - 1), ']');
		} else {
			sb.append(']');
		}
		return sb.toString();
	}

	@Override
	public int hashCode() {
		int result = 1;
		result = ((result * 31) + ((this.name == null) ? 0 : this.name.hashCode()));
		result = ((result * 31) + ((this.description == null) ? 0 : this.description.hashCode()));
		result = ((result * 31) + ((this.id == null) ? 0 : this.id.hashCode()));
		result = ((result * 31) + ((this.type == null) ? 0 : this.type.hashCode()));
		result = ((result * 31) + super.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object other) {
		if (other == this) {
			return true;
		}
		if ((other instanceof Vulnerability) == false) {
			return false;
		}
		Vulnerability rhs = ((Vulnerability) other);
		return ((((super.equals(rhs) && ((this.name == rhs.name) || ((this.name != null) && this.name.equals(rhs.name)))) &&
				  ((this.description == rhs.description) || ((this.description != null) && this.description.equals(rhs.description))))
				  && ((this.id == rhs.id) || ((this.id != null) && this.id.equals(rhs.id)))) &&
				  ((this.type == rhs.type) || ((this.type != null) && this.type.equals(rhs.type))));
	}

}
