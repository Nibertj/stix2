package eu.csaware.stix2.test.reference;

import eu.csaware.stix2.common.OpenVocabularyDefaults;
import eu.csaware.stix2.common.TypedStixObject;
import eu.csaware.stix2.common.Stix2Type;
import eu.csaware.stix2.sdos.Malware;
import eu.csaware.stix2.test.util.TestConstants;
import eu.csaware.stix2.test.util.TestUtil;
import eu.csaware.stix2.util.Stix2Gson;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

/**
 *
 */
class MalwareTest {

    private static final String PATH = "reference/malware.json";
    private static Malware malware;

    @BeforeAll
    static void setUp() throws Exception {
        String jsonString = TestUtil.readResourceFile(PATH);
        malware = Stix2Gson.DEBUG.fromJson(jsonString, Malware.class);
    }

    @AfterAll
    static void tearDown() throws Exception {
    }

    @Test
    void testType() {
        Assertions.assertEquals(Stix2Type.MALWARE, malware.getType());
    }

    @Test
    void testId() {
        Assertions.assertEquals(TestConstants.MALWARE_ID, malware.getId());
    }

    @Test
    void testName() {
        Assertions.assertEquals("Cryptolocker", malware.getName());
    }

    @Test
    void testCreated() {
        Assertions.assertEquals(TestConstants.DATE_TIME_CREATED, malware.getCreated());
    }

    @Test
    void testModified() {
        Assertions.assertEquals(TestConstants.DATE_TIME_MODIFIED, malware.getModified());
    }

    @Test
    void testCreatedByRef() {
        Assertions.assertNull(malware.getCreatedByRef());
    }

    @Test
    void testRevoked() {
        Assertions.assertNull(malware.getRevoked());
    }

    @Test
    void testGranularMarkings() {
        Assertions.assertNotNull(malware.getGranularMarkings());
        Assertions.assertEquals(0, malware.getGranularMarkings().size());
    }

    @Test
    void testObjectMarkingRefs() {
        Assertions.assertNotNull(malware.getObjectMarkingRefs());
        Assertions.assertEquals(0, malware.getObjectMarkingRefs().size());
    }

    @Test
    void testLabels() {
        Assertions.assertNotNull(malware.getLabels());
        Assertions.assertEquals(1, malware.getLabels().size());
        String label = malware.getLabels().get(0);
        Assertions.assertEquals(OpenVocabularyDefaults.MALWARE_LABEL_RANSOMWARE, label);
    }

    @Test
    void testNullSafety() {
        Malware malware = new Malware();
        Assertions.assertNotNull(malware.getKillChainPhases());
        Assertions.assertNotNull(malware.getGranularMarkings());
        Assertions.assertNotNull(malware.getObjectMarkingRefs());
        Assertions.assertNotNull(malware.getLabels());
    }

    @Test
    void testCreation() throws IOException {
        List<String> labels = Collections.singletonList(OpenVocabularyDefaults.MALWARE_LABEL_RANSOMWARE);
        Malware malware = new Malware(
            TestConstants.MALWARE_ID,
            labels,
            "Cryptolocker",
            TestConstants.DATE_TIME_CREATED,
            TestConstants.DATE_TIME_MODIFIED
        );
        Assertions.assertNotNull(malware);
        String created = Stix2Gson.DEBUG.toJson(malware);
        String jsonString = TestUtil.readResourceFile(PATH);
        TestUtil.writeSerializedOutputFile(PATH, created);
        Assertions.assertEquals(TestUtil.sanitizeJson(jsonString), TestUtil.sanitizeJson(created));
    }

    @Test
    void testAutoType() throws IOException {
        String jsonString = TestUtil.readResourceFile(PATH);
        TypedStixObject core = Stix2Gson.DEBUG.fromJson(jsonString, TypedStixObject.class);
        Assertions.assertTrue(core instanceof Malware);
    }
}
