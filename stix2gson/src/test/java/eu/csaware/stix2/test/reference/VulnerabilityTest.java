package eu.csaware.stix2.test.reference;

import eu.csaware.stix2.common.ExternalReference;
import eu.csaware.stix2.common.TypedStixObject;
import eu.csaware.stix2.common.Types;
import eu.csaware.stix2.sdos.Vulnerability;
import eu.csaware.stix2.test.util.TestConstants;
import eu.csaware.stix2.test.util.TestUtil;
import eu.csaware.stix2.util.Stix2Gson;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 */
class VulnerabilityTest {

    private static final String PATH = "reference/vulnerability.json";
    private static Vulnerability vulnerability;

    @BeforeAll
    static void setUp() throws Exception {
        String jsonString = TestUtil.readResourceFile(PATH);
        vulnerability = Stix2Gson.DEBUG.fromJson(jsonString, Vulnerability.class);
    }

    @AfterAll
    static void tearDown() throws Exception {
    }

    @Test
    void testType() {
        Assertions.assertEquals(Types.VULNERABILITY_TYPE, vulnerability.getType());
    }

    @Test
    void testId() {
        Assertions.assertEquals(TestConstants.VULNERABILITY_ID, vulnerability.getId());
    }

    @Test
    void testName() {
        Assertions.assertEquals("CVE-2016-1234", vulnerability.getName());
    }

    @Test
    void testDescription() {
        Assertions.assertNull(vulnerability.getDescription());
    }

    @Test
    void testCreated() {
        Assertions.assertEquals(TestConstants.DATE_TIME_CREATED, vulnerability.getCreated());
    }

    @Test
    void testModified() {
        Assertions.assertEquals(TestConstants.DATE_TIME_MODIFIED, vulnerability.getModified());
    }

    @Test
    void testCreatedByRef() {
        Assertions.assertNull(vulnerability.getCreatedByRef());
    }

    @Test
    void testRevoked() {
        Assertions.assertNull(vulnerability.getRevoked());
    }

    @Test
    void testGranularMarkings() {
        Assertions.assertNotNull(vulnerability.getGranularMarkings());
        Assertions.assertEquals(0, vulnerability.getGranularMarkings().size());
    }

    @Test
    void testObjectMarkingRefs() {
        Assertions.assertNotNull(vulnerability.getObjectMarkingRefs());
        Assertions.assertEquals(0, vulnerability.getObjectMarkingRefs().size());
    }

    @Test
    void testLabels() {
        Assertions.assertNotNull(vulnerability.getLabels());
        Assertions.assertEquals(0, vulnerability.getLabels().size());
    }

    @Test
    void testExternalReference() {
        Assertions.assertNotNull(vulnerability.getExternalReferences());
        Assertions.assertEquals(1, vulnerability.getExternalReferences().size());
    }

    @Test
    void testExternalReferenceSourceName() {
        Assertions.assertEquals("cve", vulnerability.getExternalReferences().get(0).getSourceName());
    }

    @Test
    void testExternalReferenceExternalId() {
        Assertions.assertEquals("CVE-2016-1234", vulnerability.getExternalReferences().get(0).getExternalId());
    }

    @Test
    void testExternalReferenceDescription() {
        Assertions.assertNull(vulnerability.getExternalReferences().get(0).getDescription());
    }

    @Test
    void testExternalReferenceUrl() {
        Assertions.assertNull(vulnerability.getExternalReferences().get(0).getUrl());
    }

    @Test
    void testExternalReferenceHashes() {
        Assertions.assertNull(vulnerability.getExternalReferences().get(0).getHashes());
    }

    @Test
    void testNullSafety() {
        Vulnerability vulnerability = new Vulnerability();
        Assertions.assertNotNull(vulnerability.getGranularMarkings());
        Assertions.assertNotNull(vulnerability.getObjectMarkingRefs());
        Assertions.assertNotNull(vulnerability.getLabels());
    }

    @Test
    void testCreation() throws IOException {
        Vulnerability vulnerability = new Vulnerability(
            TestConstants.VULNERABILITY_ID,
            "CVE-2016-1234",
            TestConstants.DATE_TIME_CREATED,
            TestConstants.DATE_TIME_MODIFIED
        );
        vulnerability.getExternalReferences().add(new ExternalReference("cve", "CVE-2016-1234"));
        Assertions.assertNotNull(vulnerability);
        String created = Stix2Gson.DEBUG.toJson(vulnerability);
        String jsonString = TestUtil.readResourceFile(PATH);
        String reserialized = Stix2Gson.DEBUG.toJson(VulnerabilityTest.vulnerability);
        Assertions.assertEquals(TestUtil.sanitizeJson(jsonString), TestUtil.sanitizeJson(created));
        TestUtil.writeSerializedOutputFile(PATH, created);
    }

    @Test
    void testAutoType() throws IOException {
        String jsonString = TestUtil.readResourceFile(PATH);
        TypedStixObject core = Stix2Gson.DEBUG.fromJson(jsonString, TypedStixObject.class);
        Assertions.assertTrue(core instanceof Vulnerability);
    }
}
